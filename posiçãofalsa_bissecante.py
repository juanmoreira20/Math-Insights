# -*- coding: utf-8 -*-
"""PosiçãoFalsa_Bissecante.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1D1ErLATWLp4q9QtiQvT9J3zP-8p8Vojq
"""

import matplotlib.pyplot as plt
def error_graph(x_axis,y_axis):
  fig = plt.figure()
  plt.xlabel('Número de iterações')
  plt.ylabel('convergência erro')
  plt.plot(x_axis,y_axis)
  plt.grid()
  plt.show()

def root_graph(x_axis,y_axis):
  fig = plt.figure()
  plt.xlabel('Número de iterações')
  plt.ylabel('convergência raiz')
  plt.plot(x_axis,y_axis)
  plt.grid()
  plt.show()

def mod(x):
  if x < 0:
    return - x
  else:
    return x  

def bissec(x0,ea,v, raiz = [], erro = [1]):
  a = float(x0[0])
  b = float(x0[1])
  if f(v,a)*f(v,b)>0:
    print('não há raizes reais dentre o intervalo')
  else:
    m = (a+b)/2
    cont = 0
    while erro[cont] > ea:
      raiz.append(m)
      if f(v,m)*f(v,a) < 0:
        m =  (m+a)/2
      elif f(v,m)*f(v,b) <0:
        m = (m+b)/2
      else:
        pass
      cont = cont +1
      erro.append(mod(m -raiz[-1]))
    print('a raiz é:', raiz[cont-1])
    erro.pop(0)
    error_graph(list(range(1,cont+1)),erro)
    root_graph(list(range(1,cont+1)),raiz)

def fpos(x0,ea,v):
  raiz = []
  erro = [1]
  a = float(x0[0])
  b = float(x0[1])
  if f(v,a)*f(v,b)>0:
    print('não há raizes reais dentre o intervalo')
  else:
    m = (a*(f(v,b))-b*(f(v,a)))/(f(v,b)-f(v,a))
    cont = 0
    while erro[cont] > ea:
      raiz.append(m)
      if f(v,m)*f(v,a) < 0:
        m =  (a*(f(v,m))-m*(f(v,a)))/(f(v,m)-f(v,a))
      elif f(v,m)*f(v,b) <0:
        m = (m*(f(v,b))-b*(f(v,m)))/(f(v,b)-f(v,m))
      else:
        pass
      cont = cont +1
      erro.append(mod(m -raiz[-1]))
    print('a raiz é:', raiz[cont-1])  
    erro.pop(0)
    error_graph(list(range(1,cont+1)),erro)
    root_graph(list(range(1,cont+1)),raiz)    
def f(v,x):
  c = float((v[0]*(x**3))+(v[1]*(x**2))+(v[2]*x)+v[3])
  return c
v = []
x0 = []
i = 0
while i < 4:
  z = float(input())
  v.append(z)
  i = i+1
i = 0
while i < 2:
  x0.append(float(input()))
  i = i+1
ea = float(input())  
fpos(x0,ea,v)
bissec(x0,ea,v)

import matplotlib.pyplot as plt
def error_graph(x_axis,y_axis):
  fig = plt.figure()
  plt.xlabel('Número de iterações')
  plt.ylabel('convergência erro')
  plt.plot(x_axis,y_axis)
  plt.grid()
  plt.show()

def root_graph(x_axis,y_axis):
  fig = plt.figure()
  plt.xlabel('Número de iterações')
  plt.ylabel('convergência raiz')
  plt.plot(x_axis,y_axis)
  plt.grid()
  plt.show()

def mod(x):
  if x < 0:
    return - x
  else:
    return x  

def raiz(x0,ea,v, raiz = [], erro = [1]):
  a = float(x0[0])
  b = float(x0[1])
  m = (a+b)/2
  t = 1/3
  t = pow(23,t)
  cont = 0
  while erro[cont] > ea:
    raiz.append(m)
    if f(v,m)*f(v,a) < 0:
      m =  (m+a)/2
    elif f(v,m)*f(v,b) <0:
      m = (m+b)/2
    else:
      pass
    cont = cont +1
    erro.append(mod(m -t))
  print('a raiz é:', raiz[cont-1])
  erro.pop(0)
  error_graph(list(range(1,cont+1)),erro)
  root_graph(list(range(1,cont+1)),raiz)
  
def fpos(x0,ea,v):
  raiz = []
  erro = [1]
  t = 1/3
  t = pow(23,t)
  a = float(x0[0])
  b = float(x0[1])
  m = (a*(f(v,b))-b*(f(v,a)))/(f(v,b)-f(v,a))
  cont = 0
  while erro[cont] > ea:
    raiz.append(m)
    if f(v,m)*f(v,a) < 0:
      m =  (a*(f(v,m))-m*(f(v,a)))/(f(v,m)-f(v,a))
    elif f(v,m)*f(v,b) <0:
      m = (m*(f(v,b))-b*(f(v,m)))/(f(v,b)-f(v,m))
    else:
      pass
    cont = cont +1
    erro.append(mod(m -t))
  print('a raiz é:', raiz[cont-1])
  erro.pop(0)
  error_graph(list(range(1,cont+1)),erro)
  root_graph(list(range(1,cont+1)),raiz)    
def f(v,x):
  c = float((v[0]*(x**3))+(v[1]*(x**2))+(v[2]*x)+v[3])
  return c

v = [1,0,0,-23]
x0 = [2,3]

epos = 10**(-20)
ebissec = 3*(10**-2)


raiz(x0,ebissec,v)
fpos(x0,epos,v)

import matplotlib.pyplot as plt
def error_graph(x_axis,y_axis):
  fig = plt.figure()
  plt.xlabel('Número de iterações')
  plt.ylabel('convergência erro')
  plt.plot(x_axis,y_axis)
  plt.grid()
  plt.show()

def root_graph(x_axis,y_axis):
  fig = plt.figure()
  plt.xlabel('Número de iterações')
  plt.ylabel('convergência raiz')
  plt.plot(x_axis,y_axis)
  plt.grid()
  plt.show()
def raiz(x0,v, raiz = [], erro = [1]):
  a = float(x0[0])
  b = float(x0[1])
  m = (a+b)/2
  t = 1/3
  t = pow(23,t)
  cont = 0
  for cont in range (50):
    raiz.append(m)
    if f(v,m)*f(v,a) < 0:
      m =  (m+a)/2
    elif f(v,m)*f(v,b) <0:
      m = (m+b)/2
    else:
      pass
    cont = cont +1
    erro.append(mod(m -t))
  print('a raiz é:', raiz[cont-1])
  erro.pop(0)
  error_graph(list(range(1,cont+1)),erro)
  root_graph(list(range(1,cont+1)),raiz)
  
v = [1,0,0,-23]
x0 = [2,3]

raiz(x0,v)

